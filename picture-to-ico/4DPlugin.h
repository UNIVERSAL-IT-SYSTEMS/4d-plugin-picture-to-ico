/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.h
 #	source generated by 4D Plugin Wizard
 #	Project : PICTURE TO ICO
 #	author : miyako
 #	2016/05/27
 #
 # --------------------------------------------------------------------------------*/



// --- PICTURE TO ICO
void PICTURE_TO_ICO(sLONG_PTR *pResult, PackagePtr pParams);

#if VERSIONWIN
#include <gdiplus.h>
#include <windows.h>
#pragma comment (lib, "gdiplus.lib") 
#endif

#if VERSIONMAC
#ifndef BYTE
typedef uint8_t BYTE;
#endif

#ifndef WORD
typedef uint16_t WORD;
#endif

#ifndef DWORD
typedef uint32_t DWORD;
#endif

#ifndef LONG
typedef int32_t LONG;
#endif

#endif

#if VERSIONMAC
#ifndef BITMAPINFOHEADER
typedef struct tagBITMAPINFOHEADER {
	DWORD biSize;
	LONG  biWidth;
	LONG  biHeight;
	WORD  biPlanes;
	WORD  biBitCount;
	DWORD biCompression;
	DWORD biSizeImage;
	LONG  biXPelsPerMeter;
	LONG  biYPelsPerMeter;
	DWORD biClrUsed;
	DWORD biClrImportant;
} BITMAPINFOHEADER;
#endif

#ifndef RGBQUAD
typedef struct tagRGBQUAD {
	BYTE rgbBlue;
	BYTE rgbGreen;
	BYTE rgbRed;
	BYTE rgbReserved;
} RGBQUAD;
#endif

#endif

//https://msdn.microsoft.com/en-us/library/ms997538.aspx

#ifndef ICONDIRENTRY
#pragma pack(push)
#pragma pack(2)
typedef struct
{
	BYTE        bWidth;          // Width, in pixels, of the image
	BYTE        bHeight;         // Height, in pixels, of the image
	BYTE        bColorCount;     // Number of colors in image (0 if >=8bpp)
	BYTE        bReserved;       // Reserved ( must be 0)
	WORD        wPlanes;         // Color Planes
	WORD        wBitCount;       // Bits per pixel
	DWORD       dwBytesInRes;    // How many bytes in this resource?
	DWORD       dwImageOffset;   // Where in the file is this image?
} ICONDIRENTRY, *LPICONDIRENTRY;
#pragma pack(pop)
#endif

#ifndef ICONDIR
#pragma pack(push)
#pragma pack(2)
typedef struct
{
	WORD           idReserved;   // Reserved (must be 0)
	WORD           idType;       // Resource Type (1 for icons)
	WORD           idCount;      // How many images?
	ICONDIRENTRY   idEntries[1]; // An entry for each image (idCount of 'em)
} ICONDIR, *LPICONDIR;
#pragma pack(pop)
#endif

//variant of BITMAPINFO
#ifndef ICONIMAGE
typedef struct
{
	BITMAPINFOHEADER   icHeader;      // DIB header
	RGBQUAD         icColors[1];   // Color table
	BYTE            icXOR[1];      // DIB bits for XOR mask
	BYTE            icAND[1];      // DIB bits for AND mask
} ICONIMAGE, *LPICONIMAGE;
#endif

#ifndef BI_RGB
#define BI_RGB (0)
#endif
